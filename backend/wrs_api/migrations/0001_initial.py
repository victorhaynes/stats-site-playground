# Generated by Django 4.2.7 on 2024-06-26 18:35

from django.db import migrations, models
import django.db.models.deletion
from ..migration_helpers.summoner_helper import create_summoner_partitions_and_indexes, drop_summoner_partitions_and_indexes
from ..migration_helpers.summoneroverview_helper import create_summoneroverview_partitions_and_indexes, drop_summoneroverview_partitions_and_indexes
from ..migration_helpers.match_helper import create_match_partitions_and_indexes, drop_match_partitions_and_indexes
from ..migration_helpers.summonermatch_helper import create_summonermatch_partitions_and_indexes, drop_summonermatch_partitions_and_indexes
from ..migration_helpers.championstat_helper import create_championstat_partitions_and_indexes, drop_championstat_partitions_and_indexes
from ..migration_helpers.banstat_helper import create_banstat_partitions_and_indexes, drop_banstat_partitions_and_indexes
from ..migration_helpers.runepagestat_helper import create_runepagestat_partitions_and_indexes, drop_runepagestat_partitions_and_indexes
from ..migration_helpers.itembuildstat_helper import create_itembuildstat_partitions_and_indexes, drop_itembuildstat_partitions_and_indexes
from ..migration_helpers.completedbootstat_helper import create_completedbootstat_partitions_and_indexes, drop_completedbootstat_partitions_and_indexes
from ..migration_helpers.summonerspellstat_helper import create_summonerspellstat_partitions_and_indexes, drop_summonerspellstat_partitions_and_indexes
from ..migration_helpers.personalchampstat_helper import create_personalchampstat_partitions_and_indexes, drop_personalchampstat_partitions_and_indexes
from ..migration_helpers.preferredrole_helper import create_preferredrole_partitions_and_indexes, drop_preferredrole_partitions_and_indexes


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BanStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('banned', models.IntegerField()),
            ],
            options={
                'db_table': 'wrs_api_banstat',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ChampionStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wins', models.IntegerField()),
                ('losses', models.IntegerField()),
                ('picked', models.IntegerField()),
            ],
            options={
                'db_table': 'wrs_api_championstat',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CompletedBootStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wins', models.IntegerField()),
                ('losses', models.IntegerField()),
            ],
            options={
                'db_table': 'wrs_api_completedbootstat',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ItemBuildStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wins', models.IntegerField()),
                ('losses', models.IntegerField()),
            ],
            options={
                'db_table': 'wrs_api_itembuildstat',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('matchId', models.CharField(max_length=20)),
                ('metadata', models.JSONField(default=dict)),
            ],
            options={
                'db_table': 'wrs_api_match',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PersonalChampStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('games', models.IntegerField()),
                ('wins', models.IntegerField()),
                ('losses', models.IntegerField()),
                ('kills', models.IntegerField()),
                ('deaths', models.IntegerField()),
                ('assists', models.IntegerField()),
                ('cs', models.IntegerField()),
                ('csm', models.FloatField()),
            ],
            options={
                'db_table': 'wrs_api_personalchampstat',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PreferredRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('top', models.IntegerField()),
                ('jungle', models.IntegerField()),
                ('middle', models.IntegerField()),
                ('bottom', models.IntegerField()),
                ('support', models.IntegerField()),
            ],
            options={
                'db_table': 'wrs_api_preferredrole',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RunePageStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wins', models.IntegerField()),
                ('losses', models.IntegerField()),
                ('picked', models.IntegerField()),
            ],
            options={
                'db_table': 'wrs_api_runepagestat',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Summoner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('puuid', models.CharField(max_length=100)),
                ('gameName', models.CharField(max_length=50)),
                ('tagLine', models.CharField(max_length=10)),
                ('profileIconId', models.IntegerField()),
                ('encryptedSummonerId', models.CharField(max_length=100)),
                ('most_recent_game', models.CharField(max_length=25, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'wrs_api_summoner',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SummonerMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'wrs_api_summonermatch',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SummonerOverview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'wrs_api_summoneroverview',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SummonerSpellStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wins', models.IntegerField()),
                ('losses', models.IntegerField()),
            ],
            options={
                'db_table': 'wrs_api_summonerspellstat',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Champion',
            fields=[
                ('championId', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=30, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CompletedBoot',
            fields=[
                ('itemId', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=40, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='GameMode',
            fields=[
                ('queueId', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=45, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('itemId', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=120, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Keystone',
            fields=[
                ('keystone_id', models.IntegerField(db_column='keystone_id', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=40, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PrimaryPerkOne',
            fields=[
                ('perk_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=40, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PrimaryPerkThree',
            fields=[
                ('perk_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=40, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PrimaryPerkTwo',
            fields=[
                ('perk_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=40, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Rank',
            fields=[
                ('elo', models.CharField(choices=[('Unranked', 'Unranked'), ('Iron 4', 'Iron 4'), ('Iron 3', 'Iron 3'), ('Iron 2', 'Iron 2'), ('Iron 1', 'Iron 1'), ('Bronze 4', 'Bronze 4'), ('Bronze 3', 'Bronze 3'), ('Bronze 2', 'Bronze 2'), ('Bronze 1', 'Bronze 1'), ('Silver 4', 'Silver 4'), ('Silver 3', 'Silver 3'), ('Silver 2', 'Silver 2'), ('Silver 1', 'Silver 1'), ('Gold 4', 'Gold 4'), ('Gold 3', 'Gold 3'), ('Gold 2', 'Gold 2'), ('Gold 1', 'Gold 1'), ('Platinum 4', 'Platinum 4'), ('Platinum 3', 'Platinum 3'), ('Platinum 2', 'Platinum 2'), ('Platinum 1', 'Platinum 1'), ('Emerald 4', 'Emerald 4'), ('Emerald 3', 'Emerald 3'), ('Emerald 2', 'Emerald 2'), ('Emerald 1', 'Emerald 1'), ('Diamond 4', 'Diamond 4'), ('Diamond 3', 'Diamond 3'), ('Diamond 2', 'Diamond 2'), ('Diamond 1', 'Diamond 1'), ('Master', 'Master'), ('Grandmaster', 'Grandmaster'), ('Challenger', 'Challenger')], primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('name', models.CharField(choices=[('americas', 'americas'), ('asia', 'asia'), ('europe', 'europe'), ('sea', 'sea'), ('esports', 'esports')], primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='RiotApiVersion',
            fields=[
                ('asset', models.CharField(max_length=30, primary_key=True, serialize=False)),
                ('version', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('name', models.CharField(choices=[('TOP', 'TOP'), ('JUNGLE', 'JUNGLE'), ('MIDDLE', 'MIDDLE'), ('BOTTOM', 'BOTTOM'), ('UTILITY', 'UTILITY')], primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('season', models.IntegerField()),
                ('split', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='SecondaryPerkOne',
            fields=[
                ('perk_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=40, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SecondaryPerkTwo',
            fields=[
                ('perk_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=40, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='StatShardOne',
            fields=[
                ('shard_id', models.IntegerField(db_column='shard_id', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=40, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='StatShardThree',
            fields=[
                ('shard_id', models.IntegerField(db_column='shard_id', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=40, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='StatShardTwo',
            fields=[
                ('shard_id', models.IntegerField(db_column='shard_id', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=40, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SummonerSpell',
            fields=[
                ('spellId', models.IntegerField(db_column='spellId', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=40, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('code', models.CharField(choices=[('na1', 'na1'), ('euw1', 'euw1'), ('br1', 'br1')], primary_key=True, serialize=False)),
                ('region', models.ForeignKey(db_column='region', on_delete=django.db.models.deletion.CASCADE, to='wrs_api.region')),
            ],
        ),
        migrations.CreateModel(
            name='Patch',
            fields=[
                ('full_version', models.CharField(max_length=25, primary_key=True, serialize=False)),
                ('version', models.CharField(max_length=6)),
                ('season_id', models.ForeignKey(db_column='season_id', on_delete=django.db.models.deletion.CASCADE, to='wrs_api.season')),
            ],
        ),
        migrations.RunSQL(sql=[
            """
            --- make "id" no longer a primary key (SERIAL NOT NULL)
            --- use PSQL declarative partitioning where necessary to partition tables
            --- create composite primary keys where necessary for partitioning
            --- for tables that references composite primary keys the composite fields must be present in the related table
            --- define the foreign key has a combination of the primary key fields in the same order of primary key they are referencing
            --- remove everything after NOT NULL on "id" (PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY), create partition, add partitions, insert partitions after foreign key constraint, add composite PK
            --- ADD ON DELETE CASCADE to all FOREIGN KEYS
            --- cosmetically clean up ALTER table commands (make them part of the table definition)
                
                
                --- Model Summoner
                --- Model Summoner
                --- Model Summoner
                CREATE TABLE "wrs_api_summoner" (
                    "id" SERIAL NOT NULL,
                    "puuid" varchar(100) NOT NULL,
                    "gameName" varchar(50) NOT NULL,
                    "tagLine" varchar(10) NOT NULL,
                    "profileIconId" integer NOT NULL,
                    "encryptedSummonerId" varchar(100) NOT NULL,
                    "most_recent_game" varchar(25) NULL,
                    "created_at" timestamp with time zone NOT NULL,
                    "updated_at" timestamp with time zone NOT NULL,
                    "platform" varchar NOT NULL,
                    FOREIGN KEY ("platform") REFERENCES wrs_api_platform ("code") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    UNIQUE ("puuid", "platform"),
                    PRIMARY KEY (platform, puuid)
                ) PARTITION BY LIST (platform);
                
                CREATE INDEX idx_wrs_api_summoner_lower_gamename_tagline ON wrs_api_summoner (LOWER("gameName"), LOWER("tagLine"));
                CREATE INDEX idx_wrs_api_summoner_puuid ON wrs_api_summoner ("puuid");
                CREATE INDEX idx_wrs_api_summoner_platform ON wrs_api_summoner ("platform");
            """],
            reverse_sql=[
                """
                    DROP TABLE IF EXISTS wrs_api_summoner CASCADE;
                """
            ]
        ),
        migrations.RunPython(create_summoner_partitions_and_indexes, reverse_code=drop_summoner_partitions_and_indexes
        ),
        migrations.RunSQL(sql=[
            """
                --- Model SummonerOverview
                --- Model SummonerOverview
                --- Model SummonerOverview
                CREATE TABLE "wrs_api_summoneroverview" (
                    "id" SERIAL NOT NULL,
                    "puuid" varchar(100) NOT NULL,
                    "platform" varchar NOT NULL, 
                    "season_id" bigint NOT NULL, 
                    "metadata" jsonb NOT NULL,
                    "created_at" timestamp with time zone NOT NULL,
                    "updated_at" timestamp with time zone NOT NULL,
                    FOREIGN KEY (platform, puuid) REFERENCES wrs_api_summoner (platform, puuid) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY (season_id) REFERENCES wrs_api_season (id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("platform") REFERENCES wrs_api_platform ("code") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    UNIQUE ("season_id", "puuid", "platform"),
                    PRIMARY KEY (puuid, season_id, platform)
                ) PARTITION BY LIST (platform);

                CREATE INDEX idx_wrs_api_summoneroverview_platform ON wrs_api_summoneroverview ("platform");
                CREATE INDEX idx_wrs_api_summoneroverview_season_id ON wrs_api_summoneroverview ("season_id");
                CREATE INDEX idx_wrs_api_summoneroverview_summoner_id ON wrs_api_summoneroverview ("puuid");
            """],
            reverse_sql=[
                """
                    DROP TABLE IF EXISTS wrs_api_summoneroverview CASCADE;
                """
            ]
        ),
        migrations.RunPython(create_summoneroverview_partitions_and_indexes, reverse_code=drop_summoneroverview_partitions_and_indexes
        ),
        migrations.RunSQL(sql=[
            """
                --- Model Match
                --- Model Match
                --- Model Match
                CREATE TABLE "wrs_api_match" (
                    "id" SERIAL NOT NULL,
                    "matchId" varchar(20) NOT NULL,
                    "elo" varchar NOT NULL,
                    "queueId" integer NOT NULL, 
                    "season_id" bigint NOT NULL,
                    "patch" varchar(25) NOT NULL, 
                    "platform" varchar NOT NULL, 
                    "metadata" jsonb NOT NULL, 
                    PRIMARY KEY ("platform", "matchId"),
                    FOREIGN KEY ("elo") REFERENCES wrs_api_rank ("elo") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("queueId") REFERENCES wrs_api_gamemode ("queueId") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("patch") REFERENCES wrs_api_patch ("full_version") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("season_id") REFERENCES wrs_api_season ("id") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("platform") REFERENCES "wrs_api_platform" ("code") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED
                ) PARTITION BY LIST ("platform");

                CREATE INDEX idx_wrs_api_match_patch ON wrs_api_match ("patch");
                CREATE INDEX idx_wrs_api_match_patch_like ON wrs_api_match ("patch" varchar_pattern_ops);
                CREATE INDEX idx_wrs_api_match_platform ON wrs_api_match ("platform");
                CREATE INDEX idx_wrs_api_match_queueId_id ON wrs_api_match ("queueId");
                CREATE INDEX idx_wrs_api_match_season_id ON wrs_api_match ("season_id");
                CREATE INDEX idx_wrs_api_match_elo ON wrs_api_match ("elo");
                CREATE INDEX idx_wrs_api_match_elo_like ON wrs_api_match ("elo" varchar_pattern_ops);
            """],
            reverse_sql=[
                """
                    DROP TABLE IF EXISTS wrs_api_match CASCADE;
                """
            ]
        ),
        migrations.RunPython(create_match_partitions_and_indexes, reverse_code=drop_match_partitions_and_indexes
        ),
        migrations.RunSQL(sql=[
            """
                --- Model summonermatch
                --- Model summonermatch
                --- Model summonermatch
                CREATE TABLE "wrs_api_summonermatch" (
                    "id" SERIAL NOT NULL,
                    "matchId" varchar(20) NOT NULL,
                    "elo" varchar NOT NULL,
                    "queueId" integer NOT NULL, 
                    "puuid" varchar(100) NOT NULL,
                    "season_id" bigint NOT NULL, 
                    "patch" VARCHAR(25) NOT NULL,
                    "platform" varchar NOT NULL,
                    FOREIGN KEY ("elo") REFERENCES wrs_api_rank ("elo") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("platform", "matchId") REFERENCES wrs_api_match ("platform", "matchId") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("platform", "puuid") REFERENCES wrs_api_summoner ("platform", "puuid") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("queueId") REFERENCES wrs_api_gamemode ("queueId") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("patch") REFERENCES wrs_api_patch ("full_version") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("season_id") REFERENCES wrs_api_season ("id") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("platform") REFERENCES "wrs_api_platform" ("code") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    UNIQUE ("matchId", "puuid", "platform"),
                    PRIMARY KEY ("platform", "matchId", "puuid")
                ) PARTITION BY LIST (platform);

                CREATE INDEX idx_wrs_api_summonermatch_matchId ON wrs_api_summonermatch ("matchId");
                CREATE INDEX idx_wrs_api_summonermatch_queueId ON wrs_api_summonermatch ("queueId");
                CREATE INDEX idx_wrs_api_summonermatch_puuid ON wrs_api_summonermatch ("puuid");
                CREATE INDEX idx_wrs_api_summonermatch_patch ON wrs_api_summonermatch ("patch");
                CREATE INDEX idx_wrs_api_summonermatch_season_id ON wrs_api_summonermatch ("season_id");
                CREATE INDEX idx_wrs_api_summonermatch_platform ON wrs_api_summonermatch ("platform");
                CREATE INDEX idx_wrs_api_summonermatch_elo ON wrs_api_summonermatch ("elo");
                CREATE INDEX idx_wrs_api_summonermatch_elo_like ON wrs_api_summonermatch ("elo" varchar_pattern_ops);
            """],
            reverse_sql=[
                """
                    DROP TABLE IF EXISTS wrs_api_summonermatch CASCADE;
                """
            ]
        ),
        migrations.RunPython(create_summonermatch_partitions_and_indexes, reverse_code=drop_summonermatch_partitions_and_indexes
        ),
        migrations.RunSQL(sql=[
            """
                --- Model ChampionStat
                --- Model ChampionStat
                --- Model ChampionStat
                CREATE TABLE "wrs_api_championstat" (
                    "id" SERIAL NOT NULL,
                    "championId" INTEGER NOT NULL,
                    "role" varchar NOT NULL,
                    "elo" varchar NOT NULL,
                    "wins" INTEGER NOT NULL,
                    "losses" INTEGER NOT NULL,
                    "picked" INTEGER NOT NULL,
                    "patch" VARCHAR(25) NOT NULL,
                    "platform" VARCHAR NOT NULL,
                    "season_id" BIGINT NOT NULL,
                    FOREIGN KEY ("championId") REFERENCES wrs_api_champion ("championId") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("elo") REFERENCES wrs_api_rank ("elo") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("role") REFERENCES wrs_api_role ("name") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("patch") REFERENCES wrs_api_patch ("full_version") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("platform") REFERENCES wrs_api_platform ("code") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("season_id") REFERENCES wrs_api_season ("id") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    UNIQUE ("platform","championId", "patch", "role", "elo", "season_id"),
                    PRIMARY KEY ("platform","championId", "patch", "role", "elo", "season_id")
                ) PARTITION BY LIST ("platform");

                CREATE INDEX idx_wrs_api_championstat_championId ON wrs_api_championstat ("championId");
                CREATE INDEX idx_wrs_api_championstat_patch ON wrs_api_championstat ("patch");
                CREATE INDEX idx_wrs_api_championstat_patch_like ON wrs_api_championstat ("patch" varchar_pattern_ops);
                CREATE INDEX idx_wrs_api_championstat_platform ON wrs_api_championstat ("platform");
                CREATE INDEX idx_wrs_api_championstat_season_id ON wrs_api_championstat ("season_id");
                CREATE INDEX idx_wrs_api_championstat_elo ON wrs_api_championstat ("elo");
                CREATE INDEX idx_wrs_api_championstat_role ON wrs_api_championstat ("role");
                CREATE INDEX idx_wrs_api_championstat_elo_like ON wrs_api_championstat ("elo" varchar_pattern_ops);

            """],
            reverse_sql=[
                """
                    DROP TABLE IF EXISTS wrs_api_championstat CASCADE;
                """
            ]
        ),
        migrations.RunPython(create_championstat_partitions_and_indexes, reverse_code=drop_championstat_partitions_and_indexes
        ),
        migrations.RunSQL(sql=[
            """
                --- Model BanStat
                --- Model BanStat
                --- Model BanStat
                CREATE TABLE "wrs_api_banstat" (
                    "id" SERIAL NOT NULL,
                    "championId" INTEGER NOT NULL,
                    "elo" varchar NOT NULL,
                    "banned" INTEGER NOT NULL,
                    "patch" VARCHAR(25) NOT NULL,
                    "platform" VARCHAR NOT NULL,
                    "season_id" BIGINT NOT NULL,
                    FOREIGN KEY ("championId") REFERENCES wrs_api_champion ("championId") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("elo") REFERENCES wrs_api_rank ("elo") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("patch") REFERENCES wrs_api_patch ("full_version") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("platform") REFERENCES wrs_api_platform ("code") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("season_id") REFERENCES wrs_api_season ("id") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    UNIQUE ("platform","championId", "patch", "elo", "season_id"),
                    PRIMARY KEY ("platform","championId", "patch", "elo", "season_id")
                ) PARTITION BY LIST ("platform");

                CREATE INDEX idx_wrs_api_banstat_championId ON wrs_api_banstat ("championId");
                CREATE INDEX idx_wrs_api_banstat_patch ON wrs_api_banstat ("patch");
                CREATE INDEX idx_wrs_api_banstat_patch_like ON wrs_api_banstat ("patch" varchar_pattern_ops);
                CREATE INDEX idx_wrs_api_banstat_platform ON wrs_api_banstat ("platform");
                CREATE INDEX idx_wrs_api_banstat_season_id ON wrs_api_banstat ("season_id");
                CREATE INDEX idx_wrs_api_banstat_elo ON wrs_api_banstat ("elo");
                CREATE INDEX idx_wrs_api_banstat_elo_like ON wrs_api_banstat ("elo" varchar_pattern_ops);
            """],
            reverse_sql=[
                """
                    DROP TABLE IF EXISTS wrs_api_banstat CASCADE;
                """
            ]
        ),
        migrations.RunPython(create_banstat_partitions_and_indexes, reverse_code=drop_banstat_partitions_and_indexes
        ),
        migrations.RunSQL(sql=[
            """
                --- Model RunePageStat
                --- Model RunePageStat     
                --- Model RunePageStat
                CREATE TABLE wrs_api_runepagestat (
                    "id" SERIAL NOT NULL,
                    "keystone" INTEGER NOT NULL,
                    "primary_one" INTEGER NOT NULL,
                    "primary_two" INTEGER NOT NULL,
                    "primary_three" INTEGER NOT NULL,
                    "secondary_one" INTEGER NOT NULL,
                    "secondary_two" INTEGER NOT NULL,
                    "shard_one" INTEGER NOT NULL,
                    "shard_two" INTEGER NOT NULL,
                    "shard_three" INTEGER NOT NULL,
                    "championId" INTEGER NOT NULL,
                    "role" varchar NOT NULL,
                    "elo" varchar NOT NULL,
                    "wins" INTEGER NOT NULL,
                    "losses" INTEGER NOT NULL,
                    "picked" INTEGER NOT NULL,
                    "patch" VARCHAR(25) NOT NULL,
                    "platform" VARCHAR NOT NULL,
                    "season_id" BIGINT NOT NULL,
                    FOREIGN KEY ("elo") REFERENCES wrs_api_rank ("elo") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("role") REFERENCES wrs_api_role ("name") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("championId") REFERENCES wrs_api_champion ("championId") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("keystone") REFERENCES wrs_api_keystone ("keystone_id") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("primary_one") REFERENCES wrs_api_primaryperkone ("perk_id") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("primary_two") REFERENCES wrs_api_primaryperktwo ("perk_id") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("primary_three") REFERENCES wrs_api_primaryperkthree ("perk_id") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("secondary_one") REFERENCES wrs_api_secondaryperkone ("perk_id") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("secondary_two") REFERENCES wrs_api_secondaryperktwo ("perk_id") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("shard_one") REFERENCES wrs_api_statshardone ("shard_id") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("shard_two") REFERENCES wrs_api_statshardtwo ("shard_id") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("shard_three") REFERENCES wrs_api_statshardthree ("shard_id") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("patch") REFERENCES wrs_api_patch ("full_version") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("platform") REFERENCES wrs_api_platform ("code") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("season_id") REFERENCES wrs_api_season ("id") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    UNIQUE ("keystone", "primary_one", "primary_two", "primary_three", "secondary_one", "secondary_two", "shard_one", "shard_two", "shard_three", "championId", "platform", "patch", "role", "elo", "season_id"),
                    PRIMARY KEY ("keystone", "primary_one", "primary_two", "primary_three", "secondary_one", "secondary_two", "shard_one", "shard_two", "shard_three", "championId", "platform", "patch", "role", "elo", "season_id")
                ) PARTITION BY LIST ("platform");

                CREATE INDEX idx_wrs_api_runepagestat_championId ON wrs_api_runepagestat ("championId");
                CREATE INDEX idx_wrs_api_runepagestat_keystone ON wrs_api_runepagestat ("keystone");
                CREATE INDEX idx_wrs_api_runepagestat_primary_one ON wrs_api_runepagestat ("primary_one");
                CREATE INDEX idx_wrs_api_runepagestat_primary_two ON wrs_api_runepagestat ("primary_two");
                CREATE INDEX idx_wrs_api_runepagestat_primary_three ON wrs_api_runepagestat ("primary_three");
                CREATE INDEX idx_wrs_api_runepagestat_secondary_one ON wrs_api_runepagestat ("secondary_one");
                CREATE INDEX idx_wrs_api_runepagestat_secondary_two ON wrs_api_runepagestat ("secondary_two");
                CREATE INDEX idx_wrs_api_runepagestat_shard_one ON wrs_api_runepagestat ("shard_one");
                CREATE INDEX idx_wrs_api_runepagestat_shard_two ON wrs_api_runepagestat ("shard_two");
                CREATE INDEX idx_wrs_api_runepagestat_shard_three ON wrs_api_runepagestat ("shard_three");
                CREATE INDEX idx_wrs_api_runepagestat_role ON wrs_api_runepagestat ("role");
                CREATE INDEX idx_wrs_api_runepagestat_patch ON wrs_api_runepagestat ("patch");
                CREATE INDEX idx_wrs_api_runepagestat_patch_like ON wrs_api_runepagestat ("patch" varchar_pattern_ops);
                CREATE INDEX idx_wrs_api_runepagestat_platform ON wrs_api_runepagestat ("platform");
                CREATE INDEX idx_wrs_api_runepagestat_season_id ON wrs_api_runepagestat ("season_id");
                CREATE INDEX idx_wrs_api_runepagestat_elo ON wrs_api_runepagestat ("elo");
                CREATE INDEX idx_wrs_api_runepagestat_elo_like ON wrs_api_runepagestat ("elo" varchar_pattern_ops);
            """],
            reverse_sql=[
                """
                    DROP TABLE IF EXISTS wrs_api_runepagestat CASCADE;
                """
            ]
        ),
        migrations.RunPython(create_runepagestat_partitions_and_indexes, reverse_code=drop_runepagestat_partitions_and_indexes
        ),
        migrations.RunSQL(sql=[
            """
                --- Model ItemBuildStat
                --- Model ItemBuildStat     
                --- Model ItemBuildStat
                CREATE TABLE wrs_api_itembuildstat (
                    "id" SERIAL NOT NULL,
                    "legendary_one" INTEGER NOT NULL,
                    "legendary_two" INTEGER NOT NULL,
                    "legendary_three" INTEGER NOT NULL,
                    "legendary_four" INTEGER NOT NULL,
                    "legendary_five" INTEGER NOT NULL,
                    "legendary_six" INTEGER NOT NULL,
                    "championId" INTEGER NOT NULL,
                    "role" varchar NOT NULL,
                    "elo" varchar NOT NULL,
                    "wins" INTEGER NOT NULL,
                    "losses" INTEGER NOT NULL,
                    "patch" VARCHAR(25) NOT NULL,
                    "platform" VARCHAR NOT NULL,
                    "season_id" BIGINT NOT NULL,
                    FOREIGN KEY ("elo") REFERENCES wrs_api_rank ("elo") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("role") REFERENCES wrs_api_role ("name") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("championId") REFERENCES wrs_api_champion ("championId") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("legendary_one") REFERENCES wrs_api_item ("itemId") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("legendary_two") REFERENCES wrs_api_item ("itemId") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("legendary_three") REFERENCES wrs_api_item ("itemId") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("legendary_four") REFERENCES wrs_api_item ("itemId") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("legendary_five") REFERENCES wrs_api_item ("itemId") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("legendary_six") REFERENCES wrs_api_item ("itemId") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("patch") REFERENCES wrs_api_patch ("full_version") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("platform") REFERENCES wrs_api_platform ("code") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("season_id") REFERENCES wrs_api_season ("id") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    UNIQUE ("legendary_one", "legendary_two", "legendary_three", "legendary_four", "legendary_five", "legendary_six", "championId", "platform", "patch", "role", "elo", "season_id"),
                    PRIMARY KEY ("legendary_one", "legendary_two", "legendary_three", "legendary_four", "legendary_five", "legendary_six", "championId", "platform", "patch", "role", "elo", "season_id")
                ) PARTITION BY LIST ("platform");

                CREATE INDEX idx_wrs_api_itembuildstat_championId ON wrs_api_itembuildstat ("championId");
                CREATE INDEX idx_wrs_api_itembuildstat_legendary_one ON wrs_api_itembuildstat ("legendary_one");
                CREATE INDEX idx_wrs_api_itembuildstat_legendary_two ON wrs_api_itembuildstat ("legendary_two");
                CREATE INDEX idx_wrs_api_itembuildstat_legendary_three ON wrs_api_itembuildstat ("legendary_three");
                CREATE INDEX idx_wrs_api_itembuildstat_legendary_four ON wrs_api_itembuildstat ("legendary_four");
                CREATE INDEX idx_wrs_api_itembuildstat_legendary_five ON wrs_api_itembuildstat ("legendary_five");
                CREATE INDEX idx_wrs_api_itembuildstat_legendary_six ON wrs_api_itembuildstat ("legendary_six");
                CREATE INDEX idx_wrs_api_itembuildstat_patch ON wrs_api_itembuildstat ("patch");
                CREATE INDEX idx_wrs_api_itembuildstat_patch_like ON wrs_api_itembuildstat ("patch" varchar_pattern_ops);
                CREATE INDEX idx_wrs_api_itembuildstat_platform ON wrs_api_itembuildstat ("platform");
                CREATE INDEX idx_wrs_api_itembuildstat_season_id ON wrs_api_itembuildstat ("season_id");
                CREATE INDEX idx_wrs_api_itembuildstat_role ON wrs_api_itembuildstat ("role");
                CREATE INDEX idx_wrs_api_itembuildstat_elo ON wrs_api_itembuildstat ("elo");
                CREATE INDEX idx_wrs_api_itembuildstat_elo_like ON wrs_api_itembuildstat ("elo" varchar_pattern_ops);
            """],
            reverse_sql=[
                """
                    DROP TABLE IF EXISTS wrs_api_itembuildstat CASCADE;
                """
            ]
        ),
        migrations.RunPython(create_itembuildstat_partitions_and_indexes, reverse_code=drop_itembuildstat_partitions_and_indexes
        ),
        migrations.RunSQL(sql=[
            """
                -- Model CompletedBootStat
                -- Model CompletedBootStat   
                -- Model CompletedBootStat
                CREATE TABLE wrs_api_completedbootstat (
                    "id" SERIAL NOT NULL,
                    "completed_boot" INTEGER NOT NULL,
                    "championId" INTEGER NOT NULL,
                    "role" varchar NOT NULL,
                    "elo" varchar NOT NULL,
                    "wins" INTEGER NOT NULL,
                    "losses" INTEGER NOT NULL,
                    "patch" VARCHAR(25) NOT NULL,
                    "platform" VARCHAR NOT NULL,
                    "season_id" BIGINT NOT NULL,
                    FOREIGN KEY ("elo") REFERENCES wrs_api_rank ("elo") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("role") REFERENCES wrs_api_role ("name") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("championId") REFERENCES wrs_api_champion ("championId") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("completed_boot") REFERENCES wrs_api_completedboot ("itemId") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("patch") REFERENCES wrs_api_patch (full_version) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("platform") REFERENCES wrs_api_platform (code) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("season_id") REFERENCES wrs_api_season (id) DEFERRABLE INITIALLY DEFERRED,
                    UNIQUE ("platform", "completed_boot", "championId","patch", "role", "elo", "season_id"),
                    PRIMARY KEY ("platform", "completed_boot", "championId","patch", "role", "elo", "season_id")
                ) PARTITION BY LIST ("platform");

                CREATE INDEX idx_wrs_api_completedbootstat_championId ON wrs_api_completedbootstat ("championId");
                CREATE INDEX idx_wrs_api_completedbootstat_completed_boot ON wrs_api_completedbootstat ("completed_boot");
                CREATE INDEX idx_wrs_api_completedbootstat_patch ON wrs_api_completedbootstat ("patch");
                CREATE INDEX idx_wrs_api_completedbootstat_patch_like ON wrs_api_completedbootstat ("patch" varchar_pattern_ops);
                CREATE INDEX idx_wrs_api_completedbootstat_platform ON wrs_api_completedbootstat ("platform");
                CREATE INDEX idx_wrs_api_completedbootstat_season_id ON wrs_api_completedbootstat ("season_id");
                CREATE INDEX idx_wrs_api_completedbootstat_role ON wrs_api_completedbootstat ("role");
                CREATE INDEX idx_wrs_api_completedbootstat_elo ON wrs_api_completedbootstat ("elo");
                CREATE INDEX idx_wrs_api_completedbootstat_elo_like ON wrs_api_completedbootstat ("elo" varchar_pattern_ops);
            """],
            reverse_sql=[
                """
                    DROP TABLE IF EXISTS wrs_api_completedbootstat CASCADE;
                """
            ]
        ),
        migrations.RunPython(create_completedbootstat_partitions_and_indexes, reverse_code=drop_completedbootstat_partitions_and_indexes
        ),
        migrations.RunSQL(sql=[
            """
                -- Model SummonerSpellStat
                -- Model SummonerSpellStat   
                -- Model SummonerSpellStat
                CREATE TABLE wrs_api_summonerspellstat (
                    "id" SERIAL NOT NULL,
                    "spell_one" INTEGER NOT NULL,
                    "spell_two" INTEGER NOT NULL,
                    "championId" INTEGER NOT NULL,
                    "role" varchar NOT NULL,
                    "elo" varchar NOT NULL,
                    "wins" INTEGER NOT NULL,
                    "losses" INTEGER NOT NULL,
                    "picked" INTEGER NOT NULL,
                    "patch" VARCHAR(25) NOT NULL,
                    "platform" VARCHAR NOT NULL,
                    "season_id" BIGINT NOT NULL,
                    FOREIGN KEY ("elo") REFERENCES wrs_api_rank ("elo") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("championId") REFERENCES wrs_api_champion ("championId") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("spell_one") REFERENCES wrs_api_summonerspell ("spellId") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("spell_two") REFERENCES wrs_api_summonerspell ("spellId") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("patch") REFERENCES wrs_api_patch (full_version) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("platform") REFERENCES wrs_api_platform (code) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("season_id") REFERENCES wrs_api_season (id) DEFERRABLE INITIALLY DEFERRED,
                    UNIQUE ("platform", "spell_one", "spell_two", "championId","patch", "role", "elo", "season_id"),
                    PRIMARY KEY ("platform", "spell_one", "spell_two", "championId","patch", "role", "elo", "season_id")
                ) PARTITION BY LIST ("platform");

                CREATE INDEX idx_wrs_api_summonerspellstat_championId ON wrs_api_summonerspellstat ("championId");
                CREATE INDEX idx_wrs_api_summonerspellstat_spell_one ON wrs_api_summonerspellstat ("spell_one");
                CREATE INDEX idx_wrs_api_summonerspellstat_spell_two ON wrs_api_summonerspellstat ("spell_two");
                CREATE INDEX idx_wrs_api_summonerspellstat_patch ON wrs_api_summonerspellstat ("patch");
                CREATE INDEX idx_wrs_api_summonerspellstat_patch_like ON wrs_api_summonerspellstat ("patch" varchar_pattern_ops);
                CREATE INDEX idx_wrs_api_summonerspellstat_platform ON wrs_api_summonerspellstat ("platform");
                CREATE INDEX idx_wrs_api_summonerspellstat_season_id ON wrs_api_summonerspellstat ("season_id");
                CREATE INDEX idx_wrs_api_summonerspellstat_role ON wrs_api_summonerspellstat ("role");
                CREATE INDEX idx_wrs_api_summonerspellstat_elo ON wrs_api_summonerspellstat ("elo");
                CREATE INDEX idx_wrs_api_summonerspellstat_elo_like ON wrs_api_summonerspellstat ("elo" varchar_pattern_ops);
            """],
            reverse_sql=[
                """
                    DROP TABLE IF EXISTS wrs_api_summonerspellstat CASCADE;
                """
            ]
        ),
        migrations.RunPython(create_summonerspellstat_partitions_and_indexes, reverse_code=drop_summonerspellstat_partitions_and_indexes
        ),
        migrations.RunSQL(sql=[
            """
                --- Model PersonalChampStat
                --- Model PersonalChampStat
                --- Model PersonalChampStat
                CREATE TABLE "wrs_api_personalchampstat" (
                    "id" SERIAL NOT NULL,
                    "games" integer NOT NULL,
                    "wins" integer NOT NULL,
                    "losses" integer NOT NULL,
                    "kills" integer NOT NULL,
                    "deaths" integer NOT NULL,
                    "assists" integer NOT NULL,
                    "cs" integer NOT NULL,
                    "csm" double precision NOT NULL,
                    "championId" integer NOT NULL,
                    "platform" varchar NOT NULL,
                    "puuid" varchar(100) NOT NULL,
                    "queueId" integer NOT NULL,
                    "season_id" bigint NOT NULL,
                    FOREIGN KEY ("platform", "puuid") REFERENCES wrs_api_summoner ("platform", "puuid") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("championId") REFERENCES "wrs_api_champion" ("championId") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("platform") REFERENCES "wrs_api_platform" ("code") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("queueId") REFERENCES "wrs_api_gamemode" ("queueId") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("season_id") REFERENCES "wrs_api_season" ("id") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    UNIQUE ("puuid", "platform", "championId", "season_id"),
                    PRIMARY KEY ("puuid", "platform", "championId", "season_id")
                ) PARTITION BY LIST (platform);

                CREATE INDEX idx_wrs_api_personalchampstat_championId ON wrs_api_personalchampstat ("championId");
                CREATE INDEX idx_wrs_api_personalchampstat_platform ON wrs_api_personalchampstat ("platform");
                CREATE INDEX idx_wrs_api_personalchampstat_puuid ON wrs_api_personalchampstat ("puuid");
                CREATE INDEX idx_wrs_api_personalchampstat_queueId ON wrs_api_personalchampstat ("queueId");
                CREATE INDEX idx_wrs_api_personalchampstat_season_id ON wrs_api_personalchampstat ("season_id");
            """],
            reverse_sql=[
                """
                    DROP TABLE IF EXISTS wrs_api_personalchampstat CASCADE;
                """
            ]
        ),
        migrations.RunPython(create_personalchampstat_partitions_and_indexes, reverse_code=drop_personalchampstat_partitions_and_indexes
        ),
        migrations.RunSQL(sql=[
            """
                --- Model PreferredRole
                --- Model PreferredRole
                --- Model PreferredRole
                CREATE TABLE "wrs_api_preferredrole" (
                    "id" SERIAL NOT NULL,
                    "puuid" varchar(100) NOT NULL,
                    "top" integer NOT NULL,
                    "jungle" integer NOT NULL,
                    "middle" integer NOT NULL,
                    "bottom" integer NOT NULL,
                    "support" integer NOT NULL,
                    "platform" varchar NOT NULL,
                    "season_id" bigint NOT NULL,
                    FOREIGN KEY (platform, puuid) REFERENCES wrs_api_summoner (platform, puuid) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY (season_id) REFERENCES wrs_api_season (id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    FOREIGN KEY ("platform") REFERENCES wrs_api_platform ("code") ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
                    UNIQUE ("puuid", "platform", "season_id"),
                    PRIMARY KEY ("puuid", "platform", "season_id")
                ) PARTITION BY LIST (platform);

                CREATE INDEX idx_wrs_api_preferredrole_platform ON wrs_api_preferredrole ("platform");
                CREATE INDEX idx_wrs_api_preferredrole_puuid ON wrs_api_preferredrole ("puuid");
                CREATE INDEX idx_wrs_api_preferredrole_season_id ON wrs_api_preferredrole ("season_id");
            """],
            reverse_sql=[
                """
                    DROP TABLE IF EXISTS wrs_api_preferredrole CASCADE;
                """
            ]
        ),
        migrations.RunPython(create_preferredrole_partitions_and_indexes, reverse_code=drop_preferredrole_partitions_and_indexes
        )
    ]
